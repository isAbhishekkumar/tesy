NewPipe Extractor
CI failing

JitPack v0.24.8

JDoc • Documentation

NewPipe Extractor is a library for extracting things from streaming sites. It is a core component of NewPipe, but could
be used independently.

Usage
NewPipe Extractor is available at JitPack's Maven repo.
If you're using Gradle, you could add NewPipe Extractor as a dependency with the following steps:
1. Add maven { url 'https://jitpack.io' } to the repositories in your build.gradle .
2. Add implementation 'com.github.teamnewpipe:NewPipeExtractor:INSERT_VERSION_HERE' to the dependencies in
your build.gradle . Replace INSERT_VERSION_HERE with the latest release.
3. If you are using tools to minimize your project, make sure to keep the files below, by e.g. adding the following
lines to your proguard file:
## Rules for NewPipeExtractor
-keep class org.mozilla.javascript.** { *; }
-keep class org.mozilla.classfile.ClassFileWriter
-dontwarn org.mozilla.javascript.tools.**

Note: To use NewPipe Extractor in Android projects with a minSdk below 33, core library desugaring with the
desugar_jdk_libs_nio artifact is required.

Testing changes
To test changes quickly you can build the library locally. A good approach would be to add something like the
following to your settings.gradle :
includeBuild('../NewPipeExtractor') {
dependencySubstitution {
substitute module('com.github.teamnewpipe:NewPipeExtractor') with project(':extractor')
}
}

Another approach would be to use the local Maven repository, here's a gist of how to use it:
1. Add mavenLocal() in your project repositories list (usually as the first entry to give priority above the others).
2. It's recommended that you change the version of this library (e.g. LOCAL_SNAPSHOT ).
3. Run gradle's ìnstall task to deploy this library to your local repository (using the wrapper, present in the root
of this project: ./gradlew install )
4. Change the dependency version used in your project to match the one you chose in step 2 ( implementation
'com.github.teamnewpipe:NewPipeExtractor:LOCAL_SNAPSHOT' )
Tip for Android Studio users: After you make changes and run the install task, use the menu option File →
"Sync with File System" to refresh the library in your project.

Supported sites
The following sites are currently supported:
YouTube
SoundCloud
media.ccc.de
PeerTube (no P2P)
Bandcamp

License

NewPipe Extractor is Free Software: You can use, study share and improve it at your will. Specifically you can
redistribute and/or modify it under the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later version.

Mock Tests - NewPipe Development
Documentation
A web crawler is, by its very nature, dependent on the external service which it is crawling. In
order to have a reliable CI pipeline, this external dependency needs to be removed. For this,
there is a system in place to automatically save the requests made to a service, as well as the
responses received. These can then be used in the CI pipeline to reliably test changes made to
the Extractor, and avoid test failures due to API changes on the side of the service.

Multiple downloader implementations
There are multiple implementations of the abstract class Downloader
1. DownloaderTestImpl is used for running the test against the actual service.
2. RecordingDownloader is used to save the request and response to a file, thus creating
the mock.
3. MockDownloader is used to answer requests using the saved mocks.

Usage
There are 2 ways to specify which downloader should be used.
First one is passing the -Ddownloader=<value> argument from the command line, where
value can be one of DownloaderType . The main use case is in the CI pipeline, like this:
./gradlew check --stacktrace -Ddownloader=MOCK.
Other than that it can also be used to mass generate mocks by specifying which package
should be tested. For example, if one wanted to update all YouTube mocks: gradle clean
test --tests 'org.schabi.newpipe.extractor.services.youtube.*' Ddownloader=RECORDING
The second way is changing the field DownloaderFactory.DEFAULT_DOWNLOADER. The
default value is DownloaderType.REAL which should not be changed on the master branch.
Locally one can change this to DownloaderType.RECORDING, run the tests and commit the
generated mocks.
This is the main use case for when developing locally.

Mock only tests
There are some things which cannot ever be tested reliably against an actual service. For
example, tests for an upcoming livestream would fail after the livestream starts.
For this, there is a marker interface MockOnly, and a custom TestRule MockOnlyRule. It skips
the tests in the CI pipeline if they are not run with mocks.
See MockOnlyRule for further details.
Example usage:

public static class TestClass {
@Rule
public MockOnlyRule rule = new MockOnlyRule();

@MockOnly
@Test
public void myTest() throws Exception {
//assertions
}
}

Implementing a Service - NewPipe
Development Documentation
Services, or better service connectors, are the parts of NewPipe which communicate with an
actual service like YouTube. This page will describe how you can implement and add your own
services to the extractor. Please make sure you read and understand the Concept of Extractors
and the Concept of LinkHandler before continuing.

Required and Optional Parts
Your service does not have to implement everything; some parts are optional. This is because
not all services support every feature other services support. For example, it might be that a
certain service does not support channels. If so, you can leave out the implementation of
channels, and make the corresponding factory method of the your StreamingService
implementation return null. The frontend will handle the lack of having channels.
However, if you start to implement one of the optional parts of the list below, you will have to
implement all of its parts/classes. NewPipe will crash if you only implement the extractor for
the list item of a channel, but not the channel extractor itself.
The Parts of a Service:
Head of Service
Stream
Search
Playlist (optional)
Channel (optional)
Kiosk (optional)

Allowed Libraries
The NewPipe Extractor already includes a lot of usable tools and external libraries that should
make extracting easy. For some specific (tiny) tasks, Regex is allowed. Here you can take a look
at the Parser, which will give you a little help with that. Use Regex with care!!! Avoid it as
often as possible. It's better to ask us to introduce a new library than start using Regex too
often.
Html/XML Parsing: jsoup
JSON Parsing: nanojson
JavaScript Parsing/Execution: Mozilla Rhino
Link detection in strings: AutoLink
If you need to introduce new libraries, please tell us before you do so.

Head of Service
First of all, if you want to create a new service, you should create a new package below
org.schabi.newpipe.services , with the name of your service as package name.
Parts Required to be Implemented:
StreamingService
ServiceInfo
StreamingService is a factory class that will return objects of all important parts of your service.
Every extractor, handler, and info type you add and should be part of your implementation,
must be instantiated using an instance of this class. You can see it as a factory for all objects of
your implementation.
ServiceInfo will return some metadata about your service such as the name, capabilities, the
author's name, and their email address for further notice and maintenance issues. Remember,
after extending this class, you need to return an instance of it by through your implementation
of StreamingService.getServiceInfo().
When these two classes are extended by you, you need to add your StreamingService to
the ServiceList of NewPipe. This way, your service will become an official part of the NewPipe
Extractor. Every service has an ID, which will be set when this list gets created. You need to set
this ID by entering it in the constructor. So when adding your service just give it the ID of the
previously last service in the list incremented by one.

Stream
Streams are considered single entities of video or audio. They have metadata like a title, a
description, next/related videos, a thumbnail and comments. To obtain the URL to the actual
stream data, as well as its metadata, StreamExtractor is used. The LinkHandlerFactory will
represent a link to such a stream. StreamInfoItemExtractor will extract one item in a list of
items representing such streams, like a search result or a playlist. Since every streaming service
(obviously) provides streams, this is required to implement. Otherwise, your service was pretty
useless :)
Parts Required to be Implemented:
StreamExtractor
StreamInfoItemExtractor
LinkHandlerFactory

Search
The SearchExtractor is also required to be implemented. It will take a search query represented
as SearchQueryHandler and return a list of search results. Since many services support
suggestions as you type, you will also want to implement a SuggestionExtractor. This will
make it possible for the frontend to also display a suggestion while typing.
Parts Required to be Implemented:
SearchExtractor
SearchQueryHandlerFactory
SuggestionExtractor (optional)

Playlist
Playlists are lists of streams provided by the service (you might not have to be concerned over
locally saved playlists, those will be handled by the frontend). A playlist may only contain
StreamInfoItems, but no other InfoItem types.
Parts Required to be Implemented:
PlaylistExtractor
PlayListInfoItemExtractor
ListLinkHandlerFactory

Channel
A Channel is mostly a Playlist, the only difference is that it does not only represent a simple list
of streams, but also a user, a channel, or any entity that could be represented as a user. This is
why the metadata supported by the ChannelExtractor differs from the one of a playlist.
Parts Required to be Implemented:
ChannelExtractor
ChannelInfoItemExtractor
ListLinkHandlerFactory

Kiosk
A kiosk is a list of InfoItems which will be displayed on the main page of NewPipe. A kiosk is
mostly similar to the content displayed on the main page of a video platform. A kiosk could be
something like "Top 20", "Charts", "News", "Creators Selection" etc. Kiosks are controversial;
many people may not like them. If you also don't like them, please consider your users and
refrain from denying support for them. Your service would look pretty empty if you select it
and no video is being displayed. Also, you should not override the preference of the user,
since users of NewPipe can decide by the settings whether they want to see the kiosk page or
not.
Multiple Kiosks
Most services will implement more than one kiosk, so a service might have a "Top 20" for
different categories like "Country Music", "Techno", etc. This is why the extractor will let you
implement multiple KioskExtractors. Since different kiosk pages might also differ with their
HTML structure, every page you want to support has to be implemented as its own
KioskExtractor. However, if the pages are similar, you can use the same implementation, but
set the page type when you instantiate your KioskExtractor through the
KioskList.KioskExtractorFactory.
Every kiosk you implement needs to be added to your KioskList which you return with your
StreamingService implementation.
It is also important to set the default kiosk. This will be the kiosk that will be shown by the first
start of your service.
An example implementation of the getKioskList() could look like this:

@Override
public KioskList getKioskList() throws ExtractionException {
KioskList list = new KioskList(getServiceId());

list.addKioskEntry(new KioskList.KioskExtractorFactory() {
@Override
public KioskExtractor createNewKiosk(StreamingService streamingService,
String url,
String id,
Localization local)
throws ExtractionException {
return new YoutubeTrendingExtractor(YoutubeService.this,
new YoutubeTrendingLinkHandlerFactory().fromUrl(url), id,
local);
}
}, new YoutubeTrendingLinkHandlerFactory(), "Trending");
list.setDefaultKiosk("Trending");
return list;
}

Parts Required to be Implemented:
KioskList.KioskExtractorFactory
KioskExtractor
ListLinkHandlerFactory

Concept of the LinkHandler - NewPipe
Development Documentation
The LinkHandler represent links to resources like videos, search requests, channels, etc. The
idea is that a video can have multiple links pointing to it, but it has one unique ID that
represents it, like this example:
oHg5SJYRHA0 can be represented as:
https://www.youtube.com/watch?v=oHg5SJYRHA0 (the default URL for YouTube)
https://youtu.be/oHg5SJYRHA0 (the shortened link)
https://m.youtube.com/watch?v=oHg5SJYRHA0 (the link for mobile devices)

Important notes about LinkHandler
A simple LinkHandler will contain the default URL, the ID, and the original URL.
LinkHandlers are read only.
LinkHandlers are also used to determine which part of the extractor can handle a
certain link.
In order to get one you must either call fromUrl() or fromId() of the the corresponding
LinkHandlerFactory.
Every type of resource has its own LinkHandlerFactory. Eg. YoutubeStreamLinkHandler,
YoutubeChannelLinkHandler, etc.

Usage
The typical usage for obtaining a LinkHandler would look like this:

LinkHandlerFactory myLinkHandlerFactory = new MyStreamLinkHandlerFactory();
LinkHandler myVideo =
myLinkHandlerFactory.fromUrl("https://my.service.com/the_video");

Implementation
In order to use LinkHandler for your service, you must override the appropriate
LinkHandlerFactory. eg:

class MyStreamLinkHandlerFactory extends LinkHandlerFactory {
@Override
public String getId(String url) throws ParsingException {
// Return the ID based on the URL.
}
@Override
public String getUrl(String id) throws ParsingException {
// Return the URL based on the ID given.
}
@Override
public boolean onAcceptUrl(String url) throws ParsingException {
// Return true if this LinkHandlerFactory can handle this type of link.
}
}

ListLinkHandler and SearchQueryHandler
List based resources, like channels and playlists, can be sorted and filtered. Therefore these
type of resources don't just use a LinkHandler, but a class called ListLinkHandler, which inherits
from LinkHandler and adds the field ContentFilter, which is used to filter by resource type, like
stream or playlist, and SortFilter, which is used to sort by name, date, or view count.
!!ATTENTION!! Be careful when you implement a content filter: No selected filter equals all
filters selected. If your get an empty content filter list in your extractor, make sure you return
everything. By all means, use "if" statements like contentFilter.contains("video") ||
contentFilter.isEmpty().
ListLinkHandler are also created by overriding the ListLinkHandlerFactory additionally to the
abstract methods this factory inherits from the LinkHandlerFactory you can override
getAvailableContentFilter() and getAvailableSortFilter(). Through these you can tell the front
end which kind of filter your service supports.
SearchQueryHandler
You cannot point to a search request with an ID like you point to a playlist or a channel, simply
because one and the same search request might have a different outcome depending on the
country or the time you send the request. This is why the idea of an "ID" is replaced by a
"SearchString" in the SearchQueryHandler. These work like regular ListLinkHandler, except that
you don't have to implement the methods onAcceptUrl() and getId() when overriding
SearchQueryHandlerFactory.

Testing Your Changes in the App
You should develop and test your changes with the JUnit environment that is provided by the
NewPipe Extractor and IDEA. If you want to try it with the actual frontend, you need to follow
these steps.

Setup Android Studio
First, you'll want to set up a working Android Studio environment. To do this, download Studio
from developer.android.com, and follow the instructions on how to set it up.

Get the NewPipe Code and Run it.
In order to get it, you simply clone or download it from the current dev branch
github.com/TeamNewPipe/NewPipe.git. You can then build and run it following these
instructions. Also, make sure you are comfortable with adb since you might experience some
trouble running your compiled app on a real device, especially under Linux, where you
sometimes have to adjust the udev rules in order to make your device accessible.
There are several ways to test your extractor version in NewPipe. We will show you the most
convenient ones:
Using local folder
In NewPipe app root folder, edit settings.gradle file and add this:

includeBuild('../NewPipeExtractor') {
dependencySubstitution {
substitute module('com.github.TeamNewPipe:NewPipeExtractor') with
project(':extractor')
}
}

includeBuild should have the relative path as argument. ../NewPipeExtractor means one
folder up in hierarchy, and the folder is exactly named NewPipeExtractor. If that's not the
case, edit this part.
Using JitPack
Another way is to use JitPack. This is a build service that can build maven *.jar packages for
Android and Java based on GitHub or GitLab repositories.
To use the extractor through JitPack, you need to push it to your online repository of your
copy that you host either on GitHub or GitLab. It's important to host it on one of both. To copy
your repository URL in HTTP format, go to JitPack and paste it there. From here, you can grab
the latest commit via GET IT button. I recommend not to use a SNAPSHOT, since I am not
sure when snapshot is built. An "implementation" string will be generated for you. Copy this
string and replace the implementation 'com.github.TeamNewPipe:NewPipeExtractor:
<commit>' line in the file /app/build.gradle with it.

0:00 / 0:59

If everything synced well, then you should only see a screen with OK signs. Now you can
compile and run NewPipe with the new extractor.

Troubleshooting
If something went wrong on JitPack site, you can check their build log, by selecting the
commit you tried to build and click on that little paper symbol next to the GET IT button. If
it's red, it means that the build failed.

Docs

Pricing

Private

 | Sign In

JitPack
Easy to use package repository for Git
Publish your JVM and Android libraries

teamnewpipe/NewPipeExtractor

Releases

Builds

Look up

Branches



Commits

Version

Tests Log

Status

v0.24.8



Get it



v0.24.6



Get it



v0.24.5



Get it



v0.24.4



Get it



v0.24.3



Get it



←

→

How to
To get a Git project into your build:
Step 1. Add the JitPack repository to your build file
gradle

gradle.kts

maven

sbt

leiningen

Add it in your settings.gradle.kts at the end of repositories:
dependencyResolutionManagement {
repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
repositories {
mavenCentral()
maven { url = uri("https://jitpack.io") }
}
}

Step 2. Add the dependency
dependencies {
implementation("com.github.teamnewpipe:NewPipeExtractor:Tag")
}

Share this release:
JitPack v0.24.8 

Link

That's it! The first time you request a project JitPack checks out the
code, builds it and serves the build artifacts (jar, aar).
If the project doesn't have any GitHub Releases you can use the short
commit hash or 'master-SNAPSHOT' as the version.
See also
Documentation
Private Repositories
Immutable Artifacts

Features







Snapshots

Doc publishing

Stats

Build a specific commit or the latest

Track your downloads

Works on any branch or pull request

Library javadocs are published and
hosted automatically

More info →

More info →

Weekly and monthly stats available to
maintainers







CDN powered

Private repositories

Custom domains

Artifacts are served via a global CDN

Private builds remain private

Match artifact names with your domain

Fast downloads for you and your users

Share them when needed. More info →

More info →

Customers

What developers say

 Check out one of our favorite new tools
@jitpack #AndroidDev #java #gradle


Buccaneer Tech,
INC
@BuccaneerTec
h



|| 

Follow @jitpack

Works
with

© 2015-2025 JitPack | JitCI |  Twitter |  GitHub | Pricing | Terms | Privacy | Status

Powered
by

Package org.schabi.newpipe.extractor.timeago.patterns
Class Summary
Class

Description

af
am
ar
az
be
bg
bn
bs
ca
cs
da
de
el
en
en_GB
es
es_419
es_US
et
eu
fa
fi
fil
fr
fr_CA
gl
gu
hi
hr
hu
hy
id
is
it
iw
ja
ka
kk
km
kn
ko
ky
lo
lt
lv
mk
ml
mn
mr
ms
my
ne
nl
no
pa
pl
pt
pt_PT
ro
ru
si
sk
sl
sq
sr
sr_Latn
sv
sw
ta
te
th
tr
uk
ur
uz
vi
zh_CN
zh_HK
zh_TW
zu

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.services.youtube.extractors
Class Summary
Class

Description

YoutubeChannelExtractor
YoutubeChannelInfoItemExtractor
YoutubeChannelTabExtractor

A ChannelTabExtractor implementation for the YouTube service.

YoutubeChannelTabExtractor.VideosTabExtractor

A YoutubeChannelTabExtractor for the Videos tab, if it has been already fetched.

YoutubeChannelTabPlaylistExtractor

A ChannelTabExtractor for YouTube system playlists using a YoutubePlaylistExtractor instance.

YoutubeCommentsExtractor
YoutubeCommentsInfoItemExtractor
YoutubeFeedExtractor
YoutubeFeedInfoItemExtractor
YoutubeMixOrPlaylistInfoItemExtractor
YoutubeMixOrPlaylistLockupInfoItemExtractor
YoutubeMixPlaylistExtractor

A YoutubePlaylistExtractor for a mix (auto-generated playlist).

YoutubeMusicAlbumOrPlaylistInfoItemExtractor
YoutubeMusicArtistInfoItemExtractor
YoutubeMusicSearchExtractor
YoutubeMusicSongOrVideoInfoItemExtractor
YoutubePlaylistExtractor
YoutubePlaylistInfoItemExtractor
YoutubeReelInfoItemExtractor

A StreamInfoItemExtractor for YouTube's reelItemRenderers.

YoutubeSearchExtractor
YoutubeStreamExtractor
YoutubeStreamInfoItemExtractor
YoutubeStreamInfoItemLockupExtractor

Note: This extractor is currently (2025-07) only used to extract related video streams.
The following features are currently not implemented because they have never been observed: Shorts Premieres Paid content (Premium, members
first or only)

YoutubeSubscriptionExtractor

Extract subscriptions from a Google takeout export

YoutubeSuggestionExtractor

Exception Summary
Exception

Description

YoutubeChannelTabPlaylistExtractor.SystemPlaylistUrlCreationException

Exception thrown when a YouTube system playlist URL could not be created.

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor
Interface Summary
Interface

Description

Collector<I,​E>

Collectors are used to simplify the collection of information from extractors

InfoItemExtractor

Class Summary
Class

Description

Extractor
Image

Class representing images in the extractor.

Info
InfoItem
InfoItemsCollector<I extends InfoItem,​E extends
InfoItemExtractor>
ListExtractor<R extends InfoItem>

Base class to extractors that have a list (e.g.

ListExtractor.InfoItemsPage<T extends InfoItem>

A class that is used to wrap a list of gathered items and eventual errors, it also contains a field that points to the next available page
(ListExtractor.InfoItemsPage.nextPage).

ListInfo<T extends InfoItem>
MetaInfo
MultiInfoItemsCollector

A collector that can handle many extractor types, to be used when a list contains items of different types (e.g.

NewPipe

Provides access to streaming services supported by NewPipe.

Page
ServiceList

A list of supported services.

StreamingService
StreamingService.ServiceInfo

This class holds meta information about the service implementation.

Enum Summary
Enum

Description

Image.ResolutionLevel

The estimated resolution level of an Image.

InfoItem.InfoType
MediaFormat

Static data about various media formats support by NewPipe, eg mime type, extension

StreamingService.LinkType

LinkType will be used to determine which type of URL you are handling, and therefore which part of NewPipe should handle a certain URL.

StreamingService.ServiceInfo.MediaCapability

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Concept of the Extractor - NewPipe
Development Documentation
Before you start coding your own service, you need to understand the basic concept of the
extractor itself. There is a pattern you will find all over the code, called the extractor/collector
pattern. The idea behind it is that the extractor would produce fragments of data, and the
collector would collect them and assemble that data into a readable format for the front end.
The collector also controls the parsing process, and takes care of error handling. So, if the
extractor fails at any point, the collector will decide whether or not it should continue parsing.
This requires the extractor to be made out of multiple methods, one method for every data
field the collector wants to have. The collectors are provided by NewPipe. You need to take
care of the extractors.

Usage in the Front End
A typical call for retrieving data from a website would look like this:

Info info;
try {
// Create a new Extractor with a given context provided as parameter.
Extractor extractor = new Extractor(some_meta_info);
// Retrieves the data form extractor and builds info package.
info = Info.getInfo(extractor);
} catch(Exception e) {
// handle errors when collector decided to break up extraction
}

The typical implementation of a single data extractor, on the other hand, would look like this:

class MyExtractor extends FutureExtractor {

public MyExtractor(RequiredInfo requiredInfo, ForExtraction forExtraction) {
super(requiredInfo, forExtraction);

...
}
@Override
public void fetch() {
// Actually fetch the page data here
}
@Override
public String someDataField()
throws ExtractionException {

//The exception needs to be thrown if

something failed
// get piece of information and return it
}

...

// More datafields

}

Information can be represented as a list. In NewPipe, a list is represented by an
InfoItemsCollector. An InfoItemsCollector will collect and assemble a list of InfoItem. For each
item that should be extracted, a new Extractor must be created, and given to the
InfoItemsCollector via commit().

itemExtractor1:InfoItemExtractor

:InfoItemsCollector

itemExtractor2:InfoItemExtractor

itemExtractor3:InfoItemExtractor
If you are implementing a list in your service you need to implement an InfoItemExtractor, that
will be able to retrieve data for one and only one InfoItem. This extractor will then be comitted
to the InfoItemsCollector that can collect the type of InfoItems you want to generate.
A common implementation would look like this:
private SomeInfoItemCollector collectInfoItemsFromElement(Element e) {
// See *Some* as something like Stream or Channel
// e.g. StreamInfoItemsCollector, and ChannelInfoItemsCollector are provided
by NP
SomeInfoItemCollector collector = new SomeInfoItemCollector(getServiceId());
for(final Element li : element.children()) {
collector.commit(new InfoItemExtractor() {
@Override
public String getName() throws ParsingException {
...
}

@Override
public String getUrl() throws ParsingException {
...
}

...
}
return collector;
}

There is more to know about lists:
1. When a streaming site shows a list of items, it usually offers some additional information
about that list like its title, a thumbnail, and its creator. Such info can be called list
header.
2. When a website shows a long list of items it usually does not load the whole list, but only
a part of it. In order to get more items you may have to click on a next page button, or
scroll down.
Both of these Problems are fixed by the ListExtractor which takes care about extracting
additional metadata about the list, and by chopping down lists into several pages, so called
InfoItemsPages. Each page has its own URL, and needs to be extracted separately.
For extracting list header information a ListExtractor behaves like a regular extractor. For
handling InfoItemsPages it adds methods such as:
getInitialPage() which will return the first page of InfoItems.
getNextPageUrl() If a second Page of InfoItems is available this will return the URL
pointing to them.
getPage() returns a ListExtractor.InfoItemsPage by its URL which was retrieved by the
getNextPageUrl() method of the previous page.
The reason why the first page is handled special is because many Websites such as YouTube
will load the first page of items like a regular web page, but all the others as an AJAX request.
An InfoItemsPage itself has two constructors which take these parameters: - The
InfoitemsCollector of the list that the page should represent - A nextPageUrl which
represents the url of the following page (may be null if not page follows). - Optionally errors
which is a list of Exceptions that may have happened during extracton.
Here is a simplified reference implementation of a list extractor that only extracts pages, but
not metadata:

class MyListExtractor extends ListExtractor {
...
private Document document;

...

public InfoItemsPage<SomeInfoItem> getPage(pageUrl)
throws ExtractionException {
SomeInfoItemCollector collector = new
SomeInfoItemCollector(getServiceId());
document = myFunctionToGetThePageHTMLWhatever(pageUrl);
//remember this part from the simple list extraction
for(final Element li : document.children()) {
collector.commit(new InfoItemExtractor() {
@Override
public String getName() throws ParsingException {
...
}

@Override
public String getUrl() throws ParsingException {
...
}
...
}
return new InfoItemsPage<SomeInfoItem>(collector,
myFunctionToGetTheNextPageUrl(document));
}

public InfoItemsPage<SomeInfoItem> getInitialPage() {
//document here got initialized by the fetch() function.
return getPage(getTheCurrentPageUrl(document));
}
...
}

Package org.schabi.newpipe.extractor.services.youtube
Interface Summary
Interface

Description

PoTokenProvider

Interface to provide poTokens to YouTube player requests.

Class Summary
Class

Description

InnertubeClientRequestInfo
InnertubeClientRequestInfo.ClientInfo
InnertubeClientRequestInfo.DeviceInfo
ItagItem
PoTokenResult

The result of a supported/successful poToken extraction request by a PoTokenProvider.

YoutubeChannelHelper

Shared functions for extracting YouTube channel pages and tabs.

YoutubeChannelHelper.ChannelHeader

A channel header response.

YoutubeChannelHelper.ChannelResponseData

Response data object for YoutubeChannelHelper.getChannelResponse(String, String, Localization,
ContentCountry), after any redirection in the allowed redirects count (3).

YoutubeDescriptionHelper
YoutubeJavaScriptPlayerManager

Manage the extraction and the usage of YouTube's player JavaScript needed data in the YouTube service.

YoutubeMetaInfoHelper
YoutubeParsingHelper
YoutubeService
YoutubeStreamHelper

Enum Summary
Enum

Description

DeliveryType

Streaming format types used by YouTube in their streams.

ItagItem.ItagType
YoutubeChannelHelper.ChannelHeader.HeaderType

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

Types of supported YouTube channel headers.

INDEX

HELP

Package org.schabi.newpipe.extractor.stream
Interface Summary
Interface

Description

StreamInfoItemExtractor

Class Summary
Class

Description

AudioStream
AudioStream.Builder

Class to build AudioStream objects.

Description
Frameset

Class to handle framesets / storyboards which summarize the stream content.

Stream

Abstract class which represents streams in the extractor.

StreamExtractor

Scrapes information from a video/audio streaming service (eg, YouTube).

StreamInfo

Info object for opened contents, i.e.

StreamInfoItem

Info object for previews of unopened videos, e.g.

StreamInfoItemsCollector
StreamSegment
SubtitlesStream
SubtitlesStream.Builder

Class to build SubtitlesStream objects.

VideoStream
VideoStream.Builder

Class to build VideoStream objects.

Enum Summary
Enum

Description

AudioTrackType

An enum representing the track type of AudioStreams extracted by a StreamExtractor.

DeliveryMethod

An enum to represent the different delivery methods of streams which are returned by the extractor.

StreamExtractor.Privacy
StreamType

An enum representing the stream type of a StreamInfo extracted by a StreamExtractor.

Exception Summary
Exception

Description

StreamInfo.StreamExtractException

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.utils
Class Summary
Class

Description

ExtractorHelper
ImageSuffix

Serializable class representing a suffix (which may include its format extension, such as .jpg) which needs to be added to get an
image/thumbnail URL with its corresponding height, width and estimated resolution level.

JavaScript
JsonUtils
LocaleCompat

This class contains a simple implementation of Locale.forLanguageTag(String) for Android API levels below 21 (Lollipop).

ManifestCreatorCache<K extends java.io.Serializable,​V extends
java.io.Serializable>

A serializable cache class used by the extractor to cache manifests generated with extractor's manifests generators.

Pair<F extends java.io.Serializable,​S extends java.io.Serializable>

Serializable class to create a pair of objects.

Parser

Avoid using regex !!!

RandomStringFromAlphabetGenerator

Generates a random string from a predefined alphabet.

Utils

Exception Summary
Exception

Description

Parser.RegexException

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.services.youtube.dashmanifestcreators
Class Summary
Class

Description

YoutubeDashManifestCreatorsUtils

Utilities and constants for YouTube DASH manifest creators.

YoutubeOtfDashManifestCreator

Class which generates DASH manifests of YouTube OTF streams.

YoutubePostLiveStreamDvrDashManifestCreator

Class which generates DASH manifests of YouTube post-live DVR streams (which use the LIVE delivery type).

YoutubeProgressiveDashManifestCreator

Class which generates DASH manifests of YouTube progressive streams.

Exception Summary
Exception

Description

CreationException

Exception that is thrown when a YouTube DASH manifest creator encounters a problem while creating a manifest.

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.services.youtube.protos.playlist
Interface Summary
Interface

Description

PlaylistProtobufContinuation.ContinuationParamsOrBuilder
PlaylistProtobufContinuation.PlaylistContinuationOrBuilder

Class Summary
Class

Description

PlaylistProtobufContinuation
PlaylistProtobufContinuation.ContinuationParams

Protobuf type youtube.playlists.ContinuationParams

PlaylistProtobufContinuation.ContinuationParams.Builder

Protobuf type youtube.playlists.ContinuationParams

PlaylistProtobufContinuation.PlaylistContinuation

Protobuf type youtube.playlists.PlaylistContinuation

PlaylistProtobufContinuation.PlaylistContinuation.Builder

Protobuf type youtube.playlists.PlaylistContinuation

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.subscription
Class Summary
Class

Description

SubscriptionExtractor
SubscriptionItem

Enum Summary
Enum

Description

SubscriptionExtractor.ContentSource

Exception Summary
Exception

Description

SubscriptionExtractor.InvalidSourceException

Exception that should be thrown when the input do not contain valid content that the extractor can parse (e.g.

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.utils.jsextractor
Class Summary
Class

Description

JavaScriptExtractor

Utility class for extracting functions from JavaScript code.

Lexer

JavaScript lexer that is able to parse JavaScript code and return its tokens.

Lexer.ParsedToken

Parsed token, containing the token and its position in the input string

Enum Summary
Enum

Description

Token

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Overview (NewPipeExtractor v0.24.8)
Packages
Package
org.schabi.newpipe.extractor
org.schabi.newpipe.extractor.channel
org.schabi.newpipe.extractor.channel.tabs
org.schabi.newpipe.extractor.comments
org.schabi.newpipe.extractor.downloader
org.schabi.newpipe.extractor.exceptions
org.schabi.newpipe.extractor.feed
org.schabi.newpipe.extractor.kiosk
org.schabi.newpipe.extractor.linkhandler
org.schabi.newpipe.extractor.localization
org.schabi.newpipe.extractor.playlist
org.schabi.newpipe.extractor.search
org.schabi.newpipe.extractor.services.bandcamp
org.schabi.newpipe.extractor.services.bandcamp.extractors
org.schabi.newpipe.extractor.services.bandcamp.extractors.streaminfoitem
org.schabi.newpipe.extractor.services.bandcamp.linkHandler
org.schabi.newpipe.extractor.services.media_ccc
org.schabi.newpipe.extractor.services.media_ccc.extractors
org.schabi.newpipe.extractor.services.media_ccc.extractors.infoItems
org.schabi.newpipe.extractor.services.media_ccc.linkHandler
org.schabi.newpipe.extractor.services.peertube
org.schabi.newpipe.extractor.services.peertube.extractors
org.schabi.newpipe.extractor.services.peertube.linkHandler
org.schabi.newpipe.extractor.services.soundcloud
org.schabi.newpipe.extractor.services.soundcloud.extractors
org.schabi.newpipe.extractor.services.soundcloud.linkHandler
org.schabi.newpipe.extractor.services.youtube
org.schabi.newpipe.extractor.services.youtube.dashmanifestcreators
org.schabi.newpipe.extractor.services.youtube.extractors
org.schabi.newpipe.extractor.services.youtube.extractors.kiosk
org.schabi.newpipe.extractor.services.youtube.linkHandler
org.schabi.newpipe.extractor.services.youtube.protos.playlist
org.schabi.newpipe.extractor.stream
org.schabi.newpipe.extractor.subscription
org.schabi.newpipe.extractor.suggestion
org.schabi.newpipe.extractor.timeago
org.schabi.newpipe.extractor.timeago.patterns
org.schabi.newpipe.extractor.utils
org.schabi.newpipe.extractor.utils.jsextractor
org.schabi.newpipe.timeago_generator

Description

Package org.schabi.newpipe.extractor.services.youtube.linkHandler
Class Summary
Class

Description

YoutubeChannelLinkHandlerFactory
YoutubeChannelTabLinkHandlerFactory
YoutubeCommentsLinkHandlerFactory
YoutubeLiveLinkHandlerFactory
YoutubePlaylistLinkHandlerFactory
YoutubeSearchQueryHandlerFactory
YoutubeStreamLinkHandlerFactory
YoutubeTrendingGamingVideosLinkHandlerFactory
YoutubeTrendingLinkHandlerFactory
YoutubeTrendingMoviesAndShowsTrailersLinkHandlerFactory
YoutubeTrendingMusicLinkHandlerFactory
YoutubeTrendingPodcastsEpisodesLinkHandlerFactory

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.services.youtube.extractors.kiosk
Class Summary
Class

Description

YoutubeLiveExtractor
YoutubeTrendingExtractor
YoutubeTrendingGamingVideosExtractor
YoutubeTrendingMoviesAndShowsTrailersExtractor
YoutubeTrendingMusicExtractor
YoutubeTrendingPodcastsEpisodesExtractor

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.timeago
Class Summary
Class

Description

PatternMap
PatternsHolder
PatternsManager

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.suggestion
Class Summary
Class

Description

SuggestionExtractor

OVERVIEW
ALL CLASSES

PACKAGE

CLASS

TREE

DEPRECATED

INDEX

HELP

Package org.schabi.newpipe.extractor.linkhandler
Interface Summary
Interface

Description

ReadyChannelTabListLinkHandler.ChannelTabExtractorBuilder

Class Summary
Class

Description

LinkHandler
LinkHandlerFactory
ListLinkHandler
ListLinkHandlerFactory
ReadyChannelTabListLinkHandler
SearchQueryHandler

A ListLinkHandler which can be used to be returned from ChannelInfo#getTabs() when a specific tab's data has already been fetched.

Package org.schabi.newpipe.extractor.exceptions
Enum Summary
Enum

Description

AccountTerminatedException.Reason

Exception Summary
Exception

Description

AccountTerminatedException
AgeRestrictedContentException
ContentNotAvailableException
ContentNotSupportedException
ExtractionException
FoundAdException
GeographicRestrictionException
PaidContentException
ParsingException
PrivateContentException
ReCaptchaException
SoundCloudGoPlusContentException
UnsupportedContentInCountryException
UnsupportedTabException
YoutubeMusicPremiumContentException

Exception for contents not supported in a country.

Package org.schabi.newpipe.extractor.localization
Class Summary
Class

Description

ContentCountry

Represents a country that should be used when fetching content.

DateWrapper

A wrapper class that provides a field to describe if the date/time is precise or just an approximation.

Localization
TimeAgoParser
TimeAgoPatternsManager

A helper class that is meant to be used by services that need to parse durations such as 23 seconds and/or upload dates in the format 2 days ago or similar.

Package org.schabi.newpipe.extractor.downloader
Class Summary
Class

Description

Downloader

A base for downloader implementations that NewPipe will use to download needed resources during extraction.

Request

An object that holds request information used when executing a request.

Request.Builder
Response

A Data class used to hold the results from requests made by the Downloader implementation.

Package org.schabi.newpipe.extractor.channel.tabs
Class Summary
Class

Description

ChannelTabExtractor

A ListExtractor of InfoItems for tabs of channels.

ChannelTabInfo
ChannelTabs

Constants of channel tabs supported by the extractor.

Package org.schabi.newpipe.extractor.feed
Class Summary
Class

Description

FeedExtractor

This class helps to extract items from lightweight feeds that the services may provide.

FeedInfo

Package org.schabi.newpipe.extractor.kiosk
Interface Summary
Interface

Description

KioskList.KioskExtractorFactory

Class Summary
Class
KioskExtractor<T extends InfoItem>
KioskInfo

Description

Package org.schabi.newpipe.extractor.playlist
Interface Summary
Interface

Description

PlaylistInfoItemExtractor

Class Summary
Class

Description

PlaylistExtractor
PlaylistInfo
PlaylistInfoItem
PlaylistInfoItemsCollector

Enum Summary
Enum

Description

org.schabi.newpipe.extractor.channel
(NewPipeExtractor v0.24.8)
Skip navigation links
Overview
Package
Class
Tree
Deprecated
Index
Help
All Classes
SEARCH:
Interface Summary
Interface

Description

ChannelInfoItemExtractor
Class Summary
Class
ChannelExtractor
ChannelInfo
ChannelInfoItem
ChannelInfoItemsCollector

Description

Package org.schabi.newpipe.extractor.search
Class Summary
Class

Description

SearchExtractor
SearchInfo

Exception Summary
Exception
SearchExtractor.NothingFoundException

Description

org.schabi.newpipe.extractor.comments
(NewPipeExtractor v0.24.8)
Skip navigation links
Overview
Package
Class
Tree
Deprecated
Index
Help
All Classes
SEARCH:
Interface Summary
Interface

Description

CommentsInfoItemExtractor
Class Summary
Class
CommentsExtractor
CommentsInfo
CommentsInfoItem
CommentsInfoItemsCollector

Description

